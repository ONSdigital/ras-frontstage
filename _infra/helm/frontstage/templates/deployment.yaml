apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable }}
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
      env: {{ .Values.env }}
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
        env: {{ .Values.env }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.name}}/{{ .Chart.Name }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http-server
              containerPort: {{ .Values.container.port }}
          readinessProbe:
            httpGet:
              path: /info
              port: {{ .Values.container.port }}
            initialDelaySeconds: 1
            periodSeconds: 20
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /info
              port: {{ .Values.container.port }}
            initialDelaySeconds: 1
            periodSeconds: 20
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 5
          env:
          - name: DB_HOST
            {{- if .Values.database.managedPostgres }}
            valueFrom:
              secretKeyRef:
                name: db-config
                key: db-host
            {{- else }}
            value: $(POSTGRES_SERVICE_HOST)
            {{- end }}
          - name: DB_PORT
            valueFrom:
              secretKeyRef:
                name: db-config
                key: db-port
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                name: db-config
                key: {{ .Values.database.secrets.nameKey }}
          - name: DB_USERNAME
            valueFrom:
              secretKeyRef:
                name: db-credentials
                key: {{ .Values.database.secrets.usernameKey }}
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: db-credentials
                key: {{ .Values.database.secrets.passwordKey }}
          - name: SECURITY_USER_NAME
            valueFrom:
              secretKeyRef:
                name: security-credentials
                key: security-user
          - name: SECURITY_USER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: security-credentials
                key: security-password
          - name: JWT_SECRET
            valueFrom:
              secretKeyRef:
                name: jwt-secret
                key: jwt-secret
          - name: CASE_URL
            value: "http://$(CASE_SERVICE_HOST):$(CASE_SERVICE_PORT)"
          - name: CASE_USERNAME
            value: "$(SECURITY_USER_NAME)"
          - name: CASE_PASSWORD
            value: "$(SECURITY_USER_PASSWORD)"
          - name: COLLECTION_EXERCISE_URL
            value: "http://$(COLLECTION_EXERCISE_SERVICE_HOST):$(COLLECTION_EXERCISE_SERVICE_PORT)"
          - name: COLLECTION_EXERCISE_USERNAME
            value: "$(SECURITY_USER_NAME)"
          - name: COLLECTION_EXERCISE_PASSWORD
            value: "$(SECURITY_USER_PASSWORD)"
          - name: COLLECTION_INSTRUMENT_URL
            value: "http://$(COLLECTION_INSTRUMENT_SERVICE_HOST):$(COLLECTION_INSTRUMENT_SERVICE_PORT)"
          - name: COLLECTION_INSTRUMENT_USERNAME
            value: "$(SECURITY_USER_NAME)"
          - name: COLLECTION_INSTRUMENT_PASSWORD
            value: "$(SECURITY_USER_PASSWORD)"
          - name: EQ_URL
            value: "$(EQ_URL)"
          - name: IAC_URL
            value: "http://$(IAC_SERVICE_HOST):$(IAC_SERVICE_PORT)"
          - name: IAC_USERNAME
            value: "$(SECURITY_USER_NAME)"
          - name: IAC_PASSWORD
            value: "$(SECURITY_USER_PASSWORD)"
          - name: JSON_SECRET_KEYS
            valueFrom:
              secretKeyRef:
                name: json-secrets
                key: json-secret-keys-frontstage
          - name: OAUTHLIB_INSECURE_TRANSPORT
            value: "1"
          - name: OAUTH_URL
            value: "http://$(AUTH_SERVICE_HOST):$(AUTH_SERVICE_PORT)"
          - name: OAUTH_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: oauth-secret
                key: oauth-client-id
          - name: OAUTH_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: oauth-secret
                key: oauth-client-secret
          - name: PARTY_URL
            value: "http://$(PARTY_SERVICE_HOST):$(PARTY_SERVICE_PORT)"
          - name: PARTY_USERNAME
            value: "$(SECURITY_USER_NAME)"
          - name: PARTY_PASSWORD
            value: "$(SECURITY_USER_PASSWORD)"
          - name: PORT
            value: "{{ .Values.container.port }}"
          - name: REDIS_HOST
            value: "$(REDIS_MASTER_SERVICE_HOST)"
          - name: REDIS_PORT
            value: "$(REDIS_MASTER_SERVICE_PORT)"
          - name: REDIS_DB
            value: "3"
          - name: SECURE_MESSAGE_URL
            value: "http://$(SECURE_MESSAGE_SERVICE_HOST):$(SECURE_MESSAGE_SERVICE_PORT)"
          - name: SURVEY_URL
            value: "http://$(SURVEY_SERVICE_HOST):$(SURVEY_SERVICE_PORT)"
          - name: SURVEY_USERNAME
            value: "$(SECURITY_USER_NAME)"
          - name: SURVEY_PASSWORD
            value: "$(SECURITY_USER_PASSWORD)"
          - name: ZIPKIN_DSN
            value: "http://$(ZIPKIN_SERVICE_HOST):$(ZIPKIN_SERVICE_PORT)/api/v1/spans"
          - name: ZIPKIN_SAMPLE_RATE
            value: "100"
          - name: SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Chart.Name }}
                key: email-secret-key
          resources:
            {{ toYaml .Values.resources | nindent 12 }}
