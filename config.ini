;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   RAS Micro-Service configuration template
;   Version: 0.1.0
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;   Globally propagated settings - please do not edit this file. if you need
;   to make changes that are specific to your Micro-Service, please put them
;   into "local.ini" in the root of your Micro-Service folder.
;
;   You can select the environment from one of the options below when running
;   the Micro-Service using; ONS_ENV=(environment) ./scripts/run.sh
;
;   The DEFAULT section is 'special' in that it is pre-included in every
;   environment then overwritten by specific options from each environment.
;   When using local.ini if you include a section (in []) it will overwrite the
;   section from config.ini completely, rather than replacing specific options.
;
[DEFAULT]
;
;   enable_database will activate the database startup code. If your service
;   doesn't use persistent storage, set this to "no"
;
;   drop_database will wipe your database on startup. Useful in a test
;   environment when you need to start with a clean DB. Probably worth
;   avoiding in live environments (!)
;
enable_database = yes
drop_database = no
;
;   db_* settings, should be relatively obvious and again only useful in local
;   environments.
;
db_driver = postgresql
db_user = postgres
db_pass = postgres
db_port = 5432
db_name = onsdb
db_host = localhost
;
;   api_gateway needs to point at the API gateway you're using. Typically we
;   will have one gateway per environment, or 'localhost' for local
;
;   protocol = [http|https] specify the default protocol the API gateway should use
;
;   db_service needs to point at the name of the cloud foundry database service
;
api_protocol = http
api_host = localhost
api_port = 8080
;
flask_protocol = http
flask_host = localhost
;
db_service = ras-postgres
;
;   these settings are for development only. debug will enable the debug flag
;   that applications 'can' read. log_level is set by the debugger to control
;   how much information should be logged, and authentication = true means
;   that JWT endpoint protection is turned on. Only turn this on for testing
;   purposes.
;
debug = false
log_level = DEBUG
log_format = json
authentication = true
;
;   Encryption settings, for production purposes all these settings need to be
;   provided via environment variables.
;
crypto_key = ONS_DUMMY_KEY
jwt_algorithm = HS256
jwt_secret = vrwgLNWEffe45thh545yuby
;
;   Environments ::
;   1. test - this is primarily used by Travis for built testing
;   2. development - this is the default (local) development environment
;   3. demo - is the CF demo environment
;   4. dev  - is the CF dev environment
;   5. int  - is the CF int environment
;   6. prod - is the CF production environment
;
[travis]
drop_database = yes
db_connection = sqlite:///${db_name}
debug = true
log_level = DEBUG

[development]
authentication = true
debug = true
port = 5001

[demo]
api_gateway = api-demo.apps.mvp.onsclofo.uk
protocol = https
db_service = ras-postgres

[dev]
api_gateway = api-dev.apps.mvp.onsclofo.uk
protocol = https
db_service = ras-postgres
debug = true

[int]
api_gateway = api-int.apps.mvp.onsclofo.uk
protocol = https
db_service = ras-postgres

[prod]
api_gateway = api-prod.apps.mvp.onsclofo.uk
protocol = https
db_service = ras-postgres
